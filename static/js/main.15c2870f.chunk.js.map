{"version":3,"sources":["assets/star.png","assets/isogram-logo-1-color-white.png","SpinningCube.ts","Terrain.ts","Starfield.ts","ThreeScene.tsx","Logo.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","SpinningCube","size","object","material","this","LineMaterial","color","linewidth","vertexColors","THREE","geometry","flatShading","cube","add","speed","rotation","x","y","z","width","height","depth","lines","push","LineGeometry","setPositions","Terrain","mesh","dimensions","widthSegments","heightSegments","strength","wireframe","randomize","rotateX","degToRad","position","newPositions","Array","from","attributes","array","index","clippingPoint","i","l","length","xpos","ypos","zpos","Math","random","abs","splice","unshift","setAttribute","computeVertexNormals","computeBoundingBox","Starfield","spriteMaterial","spriteMap","options","starCount","load","starSprite","map","generateStarfield","children","forEach","star","newStar","scale","set","animateId","scene","renderer","antialias","megaCube","terrain","starfield","logo","logoPng","transparent","planeGeom","plane","camera","window","innerWidth","innerHeight","ThreeScene","renderEl","useRef","document","createElement","useEffect","setSize","setPixelRatio","devicePixelRatio","fog","background","light","light2","light3","addEventListener","e","deltaX","clientX","deltaY","clientY","lookAt","current","appendChild","domElement","handleResize","aspect","updateProjectionMatrix","removeEventListener","cancelAnimationFrame","animate","render","requestAnimationFrame","ref","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15c2870f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.afb66bc6.png\";","module.exports = __webpack_public_path__ + \"static/media/isogram-logo-1-color-white.2f7ae0da.png\";","import { LineMaterial } from \"three/examples/jsm/lines/LineMaterial.js\";\nimport { LineGeometry } from \"three/examples/jsm/lines/LineGeometry.js\";\nimport * as THREE from \"three\";\n\nclass SpinningCube {\n  public object: THREE.Object3D;\n\n  private material: LineMaterial;\n\n  constructor(size: number = 45) {\n    this.material = new LineMaterial({\n      color: 0xffffff,\n      linewidth: 0.005,\n      vertexColors: false,\n    });\n\n    this.object = new THREE.Object3D();\n\n    var geometry = new THREE.BoxBufferGeometry(size, size, size);\n    var material = new THREE.MeshStandardMaterial({\n      color: 0xaaaaaa,\n      //wireframe: true,\n      flatShading: true,\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    this.object.add(cube);\n\n    //SpinningCube.getBoxLines(15, 15, 15).forEach((line) =>\n    //  this.object.add(new Line2(line, this.material))\n    //);\n  }\n\n  public animate(speed: number = 0.01): void {\n    this.object.rotation.x += speed;\n    this.object.rotation.y += speed * 2;\n    this.object.rotation.z += speed / 2;\n  }\n\n  private static getBoxLines(\n    width: number,\n    height: number,\n    depth: number\n  ): Array<LineGeometry> {\n    width = width * 0.5;\n    height = height * 0.5;\n    depth = depth * 0.5;\n\n    const lines = [];\n\n    lines.push(\n      new LineGeometry().setPositions([\n        -width,\n        -height,\n        -depth,\n        -width,\n        height,\n        -depth,\n      ]),\n      new LineGeometry().setPositions([\n        -width,\n        height,\n        -depth,\n        width,\n        height,\n        -depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        height,\n        -depth,\n        width,\n        -height,\n        -depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        -height,\n        -depth,\n        -width,\n        -height,\n        -depth,\n      ]),\n      new LineGeometry().setPositions([\n        -width,\n        -height,\n        depth,\n        -width,\n        height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        -width,\n        height,\n        depth,\n        width,\n        height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        height,\n        depth,\n        width,\n        -height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        -height,\n        depth,\n        -width,\n        -height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        -width,\n        -height,\n        -depth,\n        -width,\n        -height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        -width,\n        height,\n        -depth,\n        -width,\n        height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        height,\n        -depth,\n        width,\n        height,\n        depth,\n      ]),\n      new LineGeometry().setPositions([\n        width,\n        -height,\n        -depth,\n        width,\n        -height,\n        depth,\n      ])\n    );\n\n    return lines;\n  }\n}\n\nexport { SpinningCube };\n","import * as THREE from \"three\";\n\nclass Terrain {\n  public object: THREE.Object3D;\n\n  private geometry: THREE.BufferGeometry;\n  private mesh: THREE.Mesh;\n  private dimensions = {\n    width: 200,\n    height: 200,\n    widthSegments: 25,\n    heightSegments: 25,\n    strength: 1.5,\n  };\n\n  constructor() {\n    this.object = new THREE.Object3D();\n    this.geometry = new THREE.PlaneBufferGeometry(\n      this.dimensions.width,\n      this.dimensions.height,\n      this.dimensions.widthSegments,\n      this.dimensions.heightSegments\n    );\n    const material = new THREE.MeshStandardMaterial({\n      color: 0xffffff,\n      flatShading: true,\n      wireframe: false,\n    });\n\n    this.randomize();\n\n    this.mesh = new THREE.Mesh(this.geometry, material);\n    this.mesh.rotateX(THREE.MathUtils.degToRad(-90));\n    this.mesh.position.z -= 50;\n\n    this.object.add(this.mesh);\n  }\n\n  public animate() {\n    const newPositions = Array.from(this.geometry.attributes.position.array);\n\n    let x = 0,\n      y = 0,\n      z = 0,\n      index = 0;\n\n    let clippingPoint =\n      -1 *\n      (this.dimensions.height / 2 +\n        this.dimensions.height / this.dimensions.heightSegments);\n\n    for (let i = 0, l = newPositions.length / 3; i < l; i++) {\n      x = index++;\n      y = index++;\n      z = index++;\n\n      newPositions[y] -= 0.05;\n\n      if (newPositions[y] < clippingPoint) {\n        let xpos = newPositions[x];\n        let ypos =\n          newPositions[y] +\n          this.dimensions.height +\n          this.dimensions.height / this.dimensions.heightSegments;\n        let zpos =\n          Math.random() *\n          Math.abs(newPositions[x] / 4) *\n          this.dimensions.strength;\n\n        // We're flipping x and z below, in order to keep the correct\n        // order after adding to the beginning of the array.\n        newPositions.splice(x, 1);\n        newPositions.unshift(zpos);\n\n        newPositions.splice(y, 1);\n        newPositions.unshift(ypos);\n\n        newPositions.splice(z, 1);\n        newPositions.unshift(xpos * -1);\n      }\n    }\n\n    this.geometry.setAttribute(\n      \"position\",\n      new THREE.Float32BufferAttribute(newPositions, 3)\n    );\n\n    this.geometry.computeVertexNormals();\n    this.geometry.computeBoundingBox();\n  }\n\n  public randomize() {\n    const newPositions = Array.from(this.geometry.attributes.position.array);\n\n    let x = 0,\n      z = 0,\n      index = 0;\n\n    for (let i = 0, l = newPositions.length / 3; i < l; i++) {\n      x = index++;\n      index++; // y\n      z = index++;\n\n      newPositions[z] =\n        Math.random() *\n        Math.abs(newPositions[x] / 4) *\n        this.dimensions.strength;\n    }\n\n    this.geometry.setAttribute(\n      \"position\",\n      new THREE.Float32BufferAttribute(newPositions, 3)\n    );\n  }\n}\n\nexport { Terrain };\n","import * as THREE from \"three\";\nimport starSprite from \"./assets/star.png\";\n\nclass Starfield {\n  public object: THREE.Object3D;\n\n  private readonly spriteMaterial: THREE.SpriteMaterial;\n  private readonly spriteMap: THREE.Texture;\n  private options = {\n    starCount: 500,\n    width: 100,\n    height: 100,\n    depth: 100,\n  };\n\n  constructor() {\n    this.spriteMap = new THREE.TextureLoader().load(starSprite);\n    this.spriteMaterial = new THREE.SpriteMaterial({\n      map: this.spriteMap,\n      color: 0xffffff,\n    });\n\n    this.object = new THREE.Object3D();\n\n    this.generateStarfield();\n  }\n\n  public animate() {\n    this.object.children.forEach((star) => {\n      star.position.z += 0.05;\n      star.position.y += 0.1;\n\n      if (\n        star.position.z > this.options.depth / 2 ||\n        star.position.y > this.options.height / 2\n      ) {\n        star.position.z = (Math.random() - 0.5) * this.options.depth;\n        star.position.x = (Math.random() - 0.5) * this.options.width;\n        star.position.y = -1 * (this.options.height / 2);\n      }\n    });\n  }\n\n  private generateStarfield() {\n    for (let i = 0; i < this.options.starCount; i++) {\n      const newStar = new THREE.Sprite(this.spriteMaterial);\n      newStar.position.x = (Math.random() - 0.5) * this.options.width;\n      newStar.position.y = (Math.random() - 0.5) * this.options.height;\n      newStar.position.z = (Math.random() - 0.5) * this.options.depth;\n      newStar.scale.set(0.3, 0.3, 0.3);\n      this.object.add(newStar);\n    }\n  }\n}\n\nexport { Starfield };\n","import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nimport { SpinningCube } from \"./SpinningCube\";\nimport { Terrain } from \"./Terrain\";\nimport { Starfield } from \"./Starfield\";\nimport { Logo } from \"./Logo\";\n\nlet animateId: number = -1;\nconst scene = new THREE.Scene();\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nconst megaCube = new SpinningCube(200);\nconst terrain = new Terrain();\nconst starfield = new Starfield();\nconst logo = new Logo();\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\n\nconst ThreeScene = () => {\n  const renderEl = useRef<HTMLDivElement>(document.createElement(\"div\"));\n\n  useEffect(() => {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    camera.position.z = 50;\n\n    scene.fog = new THREE.Fog(0xdddddd, 80, 200);\n    scene.background = new THREE.Color(0xdddddd);\n    scene.add(terrain.object);\n    scene.add(starfield.object);\n    scene.add(megaCube.object);\n    scene.add(logo.object);\n\n    logo.object.scale.set(2, 2, 1);\n    logo.object.position.y += 24;\n    logo.object.position.z += -15;\n\n    megaCube.object.position.y += 100;\n    megaCube.object.position.z -= 240;\n\n    starfield.object.position.y += 35;\n    starfield.object.position.z -= 5;\n\n    const light = new THREE.PointLight(0xffffff, 1);\n    light.position.set(0, 400, 200);\n    scene.add(light);\n\n    const light2 = new THREE.PointLight(0x0055ff, 0.6);\n    light2.position.set(200, -150, 20);\n    scene.add(light2);\n\n    const light3 = new THREE.PointLight(0x0055ff, 0.6);\n    light3.position.set(-200, -150, 200);\n    scene.add(light3);\n\n    terrain.object.position.y += -15;\n\n    window.addEventListener(\"mousemove\", (e) => {\n      const deltaX = e.clientX - window.innerWidth / 2;\n      const deltaY = e.clientY - window.innerHeight / 2;\n      camera.position.x = deltaX * 0.01;\n      camera.position.y = deltaY * -0.01;\n      camera.lookAt(new THREE.Vector3(0, 0, 0));\n    });\n\n    renderEl.current.appendChild(renderer.domElement);\n\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  useEffect(() => {\n    const animate = () => {\n      terrain.animate();\n      starfield.animate();\n      megaCube.animate(0.0025);\n      renderer.render(scene, camera);\n      animateId = requestAnimationFrame(animate);\n    };\n\n    cancelAnimationFrame(animateId);\n    animate();\n  }, []);\n\n  return (\n    <div>\n      <div ref={renderEl}></div>\n    </div>\n  );\n};\n\nexport default ThreeScene;\n","import * as THREE from \"three\";\nimport logoPng from \"./assets/isogram-logo-1-color-white.png\";\n\nclass Logo {\n  public object: THREE.Object3D;\n\n  constructor() {\n    this.object = new THREE.Object3D();\n\n    const spriteMap = new THREE.TextureLoader().load(logoPng);\n    const spriteMaterial = new THREE.MeshBasicMaterial({\n      map: spriteMap,\n      color: 0x333333,\n      transparent: true,\n    });\n\n    const planeGeom = new THREE.PlaneBufferGeometry(23.94, 15.04);\n\n    const plane = new THREE.Mesh(planeGeom, spriteMaterial);\n\n    this.object.add(plane);\n  }\n}\n\nexport { Logo };\n","import React from \"react\";\nimport \"./App.css\";\nimport ThreeScene from \"./ThreeScene\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThreeScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}